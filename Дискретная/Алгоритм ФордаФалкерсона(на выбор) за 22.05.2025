using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        int[,] graph = {
            { 0, 10, 5, 15, 0 },
            { 0, 0, 4, 0, 10 },
            { 5, 0, 0, 10, 10 },
            { 0, 0, 5, 0, 10 },
            { 0, 0, 0, 0, 0 }
        };

        int source = 0;
        int sink = 4;

        int maxFlow = CalculateMaxFlow(graph, source, sink);

        Console.WriteLine($"Максимальный поток: {maxFlow}");
    }

    static int CalculateMaxFlow(int[,] graph, int source, int sink)
    {
        int[] parent = new int[graph.GetLength(0)];
        int maxFlow = 0;

        while (BreadthFirstSearch(graph, source, sink, parent))
        {
            int pathFlow = int.MaxValue;

            for (int v = sink; v != source; v = parent[v])
            {
                int u = parent[v];
                pathFlow = Math.Min(pathFlow, graph[u, v]);
            }

            for (int v = sink; v != source; v = parent[v])
            {
                int u = parent[v];
                graph[u, v] -= pathFlow;
                graph[v, u] += pathFlow;
            }

            maxFlow += pathFlow;
        }

        return maxFlow;
    }

    static bool BreadthFirstSearch(int[,] graph, int source, int sink, int[] parent)
    {
        bool[] visited = new bool[graph.GetLength(0)];
        Queue<int> queue = new Queue<int>();
        queue.Enqueue(source);
        visited[source] = true;
        parent[source] = -1;

        while (queue.Count > 0)
        {
            int u = queue.Dequeue();

            for (int v = 0; v < graph.GetLength(0); v++)
            {
                if (!visited[v] && graph[u, v] > 0)
                {
                    queue.Enqueue(v);
                    parent[v] = u;
                    visited[v] = true;
                }
            }
        }

        return visited[sink];
    }
}








